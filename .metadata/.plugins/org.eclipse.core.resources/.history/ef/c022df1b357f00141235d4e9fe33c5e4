import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Scanner;

import com.sun.corba.se.impl.javax.rmi.CORBA.Util;

public class Driver {

	static CreateNextProcess creationQueue;
	static EventQueue eventQueue;
	static ReadyQueue readyQueue;
	public static void main(String[] args) {
		//DEFUALT FILE PATH = "UserParamFolder\\UserParams"
		Scanner scan = new Scanner(System.in);
		System.out.println("Input File Name/Path: ");
		if(Utili.init(scan.nextLine())){
		//Starts the process
			creationQueue = new CreateNextProcess();
			creationQueue.add(0.0);
			eventQueue = new EventQueue();
			readyQueue = new ReadyQueue();
			startSimulation();
		//------------------
		}
	}
	
	
	
	
	static int pid=0;
	public static void startSimulation(){
		
		while(Clock.getCurrentTime()>Utili.simulationDuration){
			//checks to see if any process need to be created
			if(creationQueue.peek()>=Clock.currentTime){
				createNewProcessEvent(creationQueue.remove());
			}
			
			//removes the next event from the event queue and process it
			Events event;
			try {
				event = eventQueue.dequeue();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			switch (event.eventType) {
			case Events.newProcess:
				Process p = new Process(event.getTimeStamp(), pid);
				pid++;
				readyQueue.enqueue(p);
				break;

			default:
				break;
			}
		}
	}
	
	
	
	//Creates all the event objects
	public static void createNewProcessEvent(double timeStamp){
		Events event = new Events(timeStamp, pid, Utili.getprocessLength(), Utili.nextCreationTime(), Utili.processType(), null, null, null, null, null, Events.newProcess);
		eventQueue.enqueue(event);
	}
	
}
