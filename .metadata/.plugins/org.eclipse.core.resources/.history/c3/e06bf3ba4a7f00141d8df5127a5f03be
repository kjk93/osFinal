import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Scanner;

import com.sun.corba.se.impl.javax.rmi.CORBA.Util;

public class Driver {

	static CreateNextProcess creationQueue;
	static EventQueue eventQueue;
	static ReadyQueue readyQueue;
	static CPU cpu;
	static SimulationStats stats;
	static Clock clock;
	public static void main(String[] args) {
		//DEFUALT FILE PATH = "UserParamFolder\\UserParams"
		Scanner scan = new Scanner(System.in);
		System.out.println("Input File Name/Path: ");
		if(Utili.init(scan.nextLine())){
		//Starts the process
			creationQueue = new CreateNextProcess();
			creationQueue.add(0.0);
			eventQueue = new EventQueue();
			readyQueue = new ReadyQueue();
			stats = new SimulationStats();
			cpu = new CPU();
			clock = new Clock();
			startSimulation();
		//------------------
		}
	}
	
	
	
	
	static int pid=0;
	public static void startSimulation(){
		createNewProcessEvent(creationQueue.remove());
		
		createCPU_ReadyEvent(0.0, 0, null, null);
		while(Clock.getCurrentTime()<Utili.simulationDuration){
			//checks to see if any process need to be created
			if(creationQueue.peek()!=null){
			if(creationQueue.peek()<=Clock.currentTime){
				createNewProcessEvent(creationQueue.remove());
			}
			}
			//removes the next event from the event queue and process it
			Events event = eventQueue.remove();;
			
			switch (event.eventType) {
			case Events.newProcess:
				Process p = new Process(event.getTimeStamp(), event.getPid(), event.getNextProcess(), event.getCpu_Time(), event.getIO__Bound(), event.getCurrentBurst());
				creationQueue.add(p.nextProcessCreateTime);
				readyQueue.enqueue(p);
				event.printEvent();
				break;
				
			case Events.cpuReady:
				Process p2 = readyQueue.remove();
				p2.setFirstBurstTime(event.getCurrentBurst());
				cpu.putOnCpu(p2);
				p2 = cpu.removeFromCPU();
				if(p2!=null){
				event.setPid(p2.getPid());
				event.setCurrentBurst(p2.getFirstBurstTime());
				event.setCpu_Time_Remaining(p2.getCpuTimeRemaining());
				event.printEvent();
				readyQueue.enqueue(p2);
				}
				break;
			case Events.ioInterupt:
				//Updates the event
				double serverTime = Utili.getioServiceTime();
				event.setServiceTime(Utili.getioServiceTime());
				event.setTimeStamp(Clock.getCurrentTime());
				//updates the Clock
				Clock.currentTime = Clock.getCurrentTime() + event.getServiceTime()+Utili.contextSwitch;
				event.printEvent();
				createIO_CompleteEvent(Clock.currentTime, event.getPid());
				break;
			case Events.ioComplete:
				event.printEvent();
				createCPU_ReadyEvent(Clock.getCurrentTime(), event.getPid(), null, null);
				break;
			case Events.quantumExpired:
				event.printEvent();
				createCPU_ReadyEvent(Clock.getCurrentTime(), event.getPid(), null, null);
				break;
			default:
				break;
			}
			//Prints Event To Screen
			
		}
		
		//Prints out all the stats
		stats.printStats();
	}
	
	
	
	//Creates all the event objects
	
	//Creates New Process Event
	public static void createNewProcessEvent(double timeStamp){
		boolean pType = Utili.processType();
		Events event = new Events(timeStamp, pid, Utili.getprocessLength(), Utili.nextCreationTime(), pType, Utili.firstBurstLength(pType), null, null, null, null, Events.newProcess);
		pid++;
		eventQueue.enqueue(event);
	}
	
	//Creates New CPU Ready Event
	public static void createCPU_ReadyEvent(double timeStamp, int pid2, Double currentburst, Double cpuTimeRemaining){
		Events event = new Events(timeStamp, pid2, null, null, null, currentburst, null, cpuTimeRemaining, null, null, Events.cpuReady);
		eventQueue.enqueue(event);
	}
	
	//Creates New IO_Interrupt Event
	public static void createIO_InterruptEvent(Double timeStamp, int pid2, Double serviceTime){
		Events event = new Events(timeStamp, pid2, null, null, null, null, serviceTime, null, null, null, Events.ioInterupt);
		eventQueue.enqueue(event);
	}
	
	//Creates New IO_Complete Event
	public static void createIO_CompleteEvent(Double timeStamp, int pid2){
		Events event = new Events(timeStamp, pid2, null, null, null, null, null, null, null, null, Events.ioComplete);
		eventQueue.enqueue(event);
	}
	
	//Creates New IO_Complete Event
	public static void createQuantumExpiredEvent(Double timeStamp, int pid2){
		Events event = new Events(timeStamp, pid2, null, null, null, null, null, null, null, null, Events.quantumExpired);
		eventQueue.enqueue(event);
	}
}
