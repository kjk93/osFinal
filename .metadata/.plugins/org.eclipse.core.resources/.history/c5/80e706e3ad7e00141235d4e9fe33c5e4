import java.awt.Event;

import com.sun.corba.se.impl.javax.rmi.CORBA.Util;


public class Process {
	
	float timeStamp;												//The time at which the process was created (microseconds)
	float nextProcessCreateTime;									//The time at which the next process will be created (microseconds)
	float CPU_Time;												//The total amount of CPU time required by the process (microseconds)
	boolean processType;										//Process type (IO bound or CPU bound)
	float firstBurstTime;											//The length of the process first cpu burst 
	Events processEvent;
	int pid;
	int numIOCalled;
	float cpuTimeRemaining;
	//
	float readyWaiting =0;
	public float getAddedToQueue() {
		return addedToQueue;
	}

	public void setAddedToQueue(float addedToQueue) {
		this.addedToQueue = addedToQueue;
	}

	float addedToQueue;
	float removedFromQueue;
	/**
	 * Process type is based on the boolean "processType"
	 * if "process type" has a value of true then it is 
	 * an IO bound process, otherwise it is CPU bound
	 * @param f
	 */
	
	public Process(float f, int processid) {
		timeStamp = f;
		pid = processid;
		nextProcessCreateTime = Utili.nextCreationTime();
		CPU_Time = Utili.totalCPU_Time();
		cpuTimeRemaining = CPU_Time;
		processType = Utili.processType();
		firstBurstTime = Utili.firstBurstLength(processType);
		processEvent = createEvent();
		numIOCalled;
	}
	
	public float getCpuTimeRemaining() {
		return cpuTimeRemaining;
	}

	public void setCpuTimeRemaining(float timeProcessed) {
		this.cpuTimeRemaining = cpuTimeRemaining - timeProcessed;
	}

	public Events getProcessEvent(){
		return processEvent;
	}
	//Creates the event object for this process based on the process type
	public Events createEvent(){
			Events event = new Events(timeStamp, pid, CPU_Time, nextProcessCreateTime, processType, firstBurstTime, null, CPU_Time, null, null, "NEW_PROCESS");
		return event;
	}
		
	public float getTimeStamp() {
		return timeStamp;
	}

	public void setTimeStamp(float timeStamp) {
		this.timeStamp = timeStamp;
	}

	public float getNextProcessCreateTime() {
		return nextProcessCreateTime;
	}

	public void setNextProcessCreateTime(float nextProcessCreateTime) {
		this.nextProcessCreateTime = nextProcessCreateTime;
	}

	public float getCPU_Time() {
		return CPU_Time;
	}

	public void setCPU_Time(float cPU_Time) {
		CPU_Time = cPU_Time;
	}

	public boolean isProcessType() {
		return processType;
	}

	public void setProcessType(boolean processType) {
		this.processType = processType;
	}

	public float getFirstBurstTime() {
		return firstBurstTime;
	}

	public void setFirstBurstTime(float firstBurstTime) {
		this.firstBurstTime = firstBurstTime;
	}

	public int getPid() {
		return pid;
	}

	public void setPid(int pid) {
		this.pid = pid;
	}

	public void setProcessEvent(Events processEvent) {
		this.processEvent = processEvent;
	}

	public void updateReadyWaiting(float addedToQueue, float removedFromQueue){
		readyWaiting = readyWaiting + (addedToQueue-removedFromQueue);
	}
	public float getReadyWaiting() {
		return readyWaiting;
	}

	public void setReadyWaiting(float readyWaiting) {
		this.readyWaiting = readyWaiting;
	}

	public float getRemovedFromQueue() {
		return removedFromQueue;
	}

	public void setRemovedFromQueue(float removedFromQueue) {
		this.removedFromQueue = removedFromQueue;
	}

	//Prints out the process values
	public void printValues(){
		System.out.println("timeStamp: " + timeStamp);
		System.out.println("nextProcessCreateTime: " + nextProcessCreateTime);
		System.out.println("CPU_Time: " + CPU_Time);
		System.out.println("processType: " + processType);
		System.out.println("firstBurstTime: " + firstBurstTime);
	}
}
